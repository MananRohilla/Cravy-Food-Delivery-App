// Mocks generated by Mockito 5.4.6 from annotations
// in food_ordering_app_with_flutter_and_bloc/test/workflows/food_ordering_workflow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:core/entities.dart' as _i5;
import 'package:food_ordering_app_with_flutter_and_bloc/repositories/restaurant_repository.dart'
    as _i3;
import 'package:food_ordering_app_with_flutter_and_bloc/services/order_service.dart'
    as _i6;
import 'package:food_ordering_app_with_flutter_and_bloc/state/order/order_bloc.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrder_0 extends _i1.SmartFake implements _i2.Order {
  _FakeOrder_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantRepository extends _i1.Mock
    implements _i3.RestaurantRepository {
  MockRestaurantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Restaurant?> fetchRestaurant(
          {required String? restaurantId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRestaurant,
          [],
          {#restaurantId: restaurantId},
        ),
        returnValue: _i4.Future<_i5.Restaurant?>.value(),
      ) as _i4.Future<_i5.Restaurant?>);

  @override
  _i4.Future<List<_i5.Restaurant>> fetchRestaurants() => (super.noSuchMethod(
        Invocation.method(
          #fetchRestaurants,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[]),
      ) as _i4.Future<List<_i5.Restaurant>>);

  @override
  _i4.Future<List<_i5.Restaurant>> fetchPopularRestaurants() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPopularRestaurants,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[]),
      ) as _i4.Future<List<_i5.Restaurant>>);

  @override
  _i4.Future<List<_i5.Restaurant>> fetchFeaturedRestaurants() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFeaturedRestaurants,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Restaurant>>.value(<_i5.Restaurant>[]),
      ) as _i4.Future<List<_i5.Restaurant>>);
}

/// A class which mocks [OrderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderService extends _i1.Mock implements _i6.OrderService {
  MockOrderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Order> placeOrder(_i2.Order? order) => (super.noSuchMethod(
        Invocation.method(
          #placeOrder,
          [order],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #placeOrder,
            [order],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<void> processPayment(_i2.Order? order) => (super.noSuchMethod(
        Invocation.method(
          #processPayment,
          [order],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i2.Order> trackOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #trackOrder,
          [orderId],
        ),
        returnValue: _i4.Stream<_i2.Order>.empty(),
      ) as _i4.Stream<_i2.Order>);

  @override
  _i4.Future<_i2.Order> cancelOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #cancelOrder,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<List<_i2.Order>> getOrderHistory() => (super.noSuchMethod(
        Invocation.method(
          #getOrderHistory,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Order>>.value(<_i2.Order>[]),
      ) as _i4.Future<List<_i2.Order>>);
}
